# This workflow will build and push a node.js application to an Azure Web App when a release is created.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 2. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: Build and Deploy node Express app to azure
on:
  push:
    branches:
      - release

env:
  AZURE_WEBAPP_NAME: ${{AZURE_WEBAPP_NAME}}    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: ${{AZURE_WEBAPP_PACKAGE_PATH}}      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '8.11.1'                # set this to the node version to use
  RESOURCEGROUPNAME: ${{RESOURCEGROUPNAME}}
  LOCATION: ${{LOCATION}}
  HOSTINGPLANNAME: ${{HOSTINGPLANNAME}}
  APPINSIGHTLOCATION: ${{APPINSIGHTLOCATION}}
  SKU: ${{SKU}}

jobs:
  build:
    name: Build and Run tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: npm install and build
      continue-on-error: false
      run: |
        # Build and test the project
        cd Application
        npm install
        npm run build --if-present
    - name: npm test
      continue-on-error: false
      run: |
        cd Tests
        npm install
        gulp unittest
    - name: Upload a Build Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: ${{ github.workspace }}
  Deploy:
    name: Deploy to azure web app
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Download artifact
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: artifacts
        path: ${{ github.workspace }}
    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    # Deploy Arm template
    - name: Deploy ARM Template
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az group create --name ${{ env.RESOURCEGROUPNAME }} --location ${{ env.LOCATION }}
          az deployment group create --resource-group ${{ env.RESOURCEGROUPNAME }} --template-file ./armTemplates/windows-webapp-template.json --parameters webAppName='${{ env.AZURE_WEBAPP_NAME }}' hostingPlanName='${{ env.HOSTINGPLANNAME }}' appInsightsLocation='${{ env.APPINSIGHTLOCATION }}' sku='${{env.SKU}}'
    # Deploy web app
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  FunctionalTests:
    name: Run Functional tests
    runs-on: windows-latest
    needs: Deploy
    steps:
    # Download artifact
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: artifacts
        path: ${{ github.workspace }}
    # Run functional tests
    - name: Run Functional tests
      continue-on-error: false
      run: |
        cd Application
        npm install
        cd ../Tests
        npm install
        $Path = $env:TEMP; $Installer = "chrome_installer.exe"; Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile $Path$Installer; Start-Process -FilePath $Path$Installer -Args "/silent /install" -Verb RunAs -Wait; Remove-Item $Path$Installer
        Invoke-WebRequest https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_win32.zip -outFile chromedriver.zip
        Expand-Archive -Path chromedriver.zip
        Remove-Item chromedriver.zip
        gulp functionaltest --webAppUrl https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/
